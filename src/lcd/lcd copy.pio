
.program lcd
.side_set 1

; Pin assignments:
; - SCK is side-set pin 0
; - MOSI is OUT pin 0
; - MISO is IN pin 0
;
; Autopush and autopull must be enabled, and the serial frame size is set by
; configuring the push/pull threshold. Shift left/right is fine, but you must
; justify the data yourself. This is done most conveniently for frame sizes of
; 8 or 16 bits by using the narrow store replication and narrow load byte
; picking behaviour of RP2040's IO fabric.

; Clock phase = 0: data is captured on the leading edge of each SCK pulse, and
; transitions on the trailing edge, or some time before the first leading edge.
.wrap_target
    out pins, 3 side 0; DATA = 0, DC = 1|0, CS = 0 
    set y, 7 side 0 
loop:
    out pins, 1 side 0 ; DATA = (1|0)
    jmp y-- loop side 1

    out pins, 3 side 0 ; DATA = 0, DC = 1|0, CS = 0|1
    out NULL, 2 side 0
     ; Stall here on empty (sideset proceeds even if
.wrap
% c-sdk {
#include "hardware/gpio.h"
static inline void lcd_program_init(PIO pio, uint sm, uint offset, float clk_div, uint clk_pin, uint data_pin_base) {
    pio_gpio_init(pio, data_pin_base);
    pio_gpio_init(pio, data_pin_base+1);
    pio_gpio_init(pio, data_pin_base+2);
    pio_gpio_init(pio, clk_pin);

    pio_sm_set_consecutive_pindirs(pio, sm, data_pin_base, 3, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);

    pio_sm_config c = lcd_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, clk_pin);
    sm_config_set_out_pins(&c, data_pin_base, 3);
    ;sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, false, true, 16);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}